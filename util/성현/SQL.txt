SELECT AL.*
	FROM (SELECT A.*, B.LIKE_COUNT, RANK() OVER (
						// if(sort) start 
						ORDER BY B.LIKE_COUNT DESC, A.PROJECT_IDX ASC
						// if(sort) end
						 ) AS "RANK_NO" , C.PROJECT_DONATION
	FROM EF_PROJECT A,	( SELECT P.PROJECT_IDX, COUNT ( L.PROJECT_IDX ) AS "LIKE_COUNT"
				FROM EF_PROJECT P LEFT JOIN EF_LIKE L 
				ON P.PROJECT_IDX = L.PROJECT_IDX
				GROUP BY A.PROJECT_IDX ) B ,	( SELECT P.PROJECT_IDX, SUM ( D.DONATION_MONEY ) AS "PROJECT_DONATION"
								FROM EF_PROJECT P LEFT OUTER JOIN EF_DONATION D
								ON P.PROJECT_IDX = D.PROJECT_IDX
								GROUP BY P.PROJECT_IDX ) C


	WHERE A.PROJECT_IDX = B.PROJECT_IDX
		AND A.PROJECT_IDX = C.PROJECT_IDX

		// 반복 foreach start
		AND A.PROJECT_IDX IN ( SELECT PROJECT_IDX
				FROM EF_CATEGORY
				WHERE CATEGORY_IDX = #{NUM} ) ) AL
		// 반복 foreach end
	WHERE AL.RANK_NO BETWEEN #{start} AND #{end} 
		AND AL.PROJECT_STATUS = 1
		
		// choose 기간 start
		AND AL.PROJECT_START > SYSDATE 	// 진행예정
		AND AL.PROJECT_START < SYSDATE AND AL.PROJECT_END > SYSDATE	// 진행중인
		AND AL.PROJECT_END < SYSDATE // 마감
		// choose 기간 end


RANK() OVER ( ORDER BY B.LIKE_COUNT DESC, A.PROJECT_IDX ASC ) AS "RANK_NO"
	-> 여기서 CHOOSE 걸고 SORT = 0, 1, 2 일 때 인기순, 최대후원순, 최신순 하면됨

	<인기순>
	ORDER BY B.LIKE_COUNT DESC, A.PROJECT_IDX ASC
	<최대 후원순>
	ORDER BY C.PROJECT_DONATION DESC, A.PROJECT_IDX ASC
	<최신 순>
	ORDER BY A.PROJECT_IDX ASC